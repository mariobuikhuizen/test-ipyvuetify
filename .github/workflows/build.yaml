name: Build
on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'
    paths-ignore:
      - '**/README.md'
      - 'examples/*'
      - '.github/workflows/release_test.yaml'

jobs:
#  Build:
#    name: Build
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v1
#      - uses: actions/setup-python@v1
#        with:
#          python-version: '3.7'
#      - name: Build requirements
#        run: |
#          cat <<EOT >> build_requirements.txt
#          wheel
#          twine
#          EOT
#      - uses: actions/cache@v1
#        with:
#          path: ~/.cache/pip
#          key: ${{ runner.os }}-pip-${{ hashFiles('build_requirements.txt') }}
#          restore-keys: |
#            ${{ runner.os }}-pip-
#      - uses: actions/cache@v1
#        with:
#          path: ~/.npm
#          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
#          restore-keys: |
#            ${{ runner.os }}-node-
#      - name: Has git?
#        run: git --version
#      - name: Install build dependencies
#        run: pip install -r build_requirements.txt;
#      - name: Generate source
#        run: python setup.py generate_source
#      - name: Build js
#        working-directory: ./js
#        run: npm install && npm run build
#      - name: Build Python source distribution
#        env:
#          NO_BUILD: True
#        run: python setup.py sdist
#      - name: Build Python wheel
#        env:
#          NO_BUILD: True
#        run: python setup.py bdist_wheel
#      - name: Test wheel
#        run: pip install `find dist| grep ".whl"`;python -c "import ipyvuetify;print('import ok!')"
#      - name: Publish package to NPM (--dry-run)
##        env:
##          NPM_TOKEN: "${{ secrets.npm_token }}"
#        working-directory: ./js
#        run: npm publish --dry-run
#      - name: upload
#        uses: actions/upload-artifact@v1
#        with:
#          name: dist
#          path: dist
#  VisualTest:
#    needs: Build
#    runs-on: macos-latest
#    steps:
#      - uses: actions/checkout@v1
#        with:
#          lfs: true
#      - name: download build
#        uses: actions/download-artifact@v1
#        with:
#          name: dist
#      - name: find
#        run: find .
#      - uses: actions/setup-python@v1
#        with:
#          python-version: '3.7'
#      - name: Build requirements
#        run: |
#          cat <<EOT >> build_requirements.txt
#          jupyterlab
#          ipywidgets
#          ipyvue
#          EOT
#      - uses: actions/cache@v1
#        with:
#          path: ~/.cache/pip
#          key: ${{ runner.os }}-pip-${{ hashFiles('build_requirements.txt') }}
#          restore-keys: |
#            ${{ runner.os }}-pip-
#      - uses: actions/cache@v1
#        with:
#          path: ~/.npm
#          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
#          restore-keys: |
#            ${{ runner.os }}-node-
#      - name: Install build dependencies
#        run: pip install -r build_requirements.txt; pip install `find dist| grep ".whl"`
#      - name: Install puppeteer
#        run: npm install puppeteer resemblejs
#      - name: Run Jupyter Notebook
#        run: |
#          cd examples
#          ls -ahl
#          jupyter notebook --NotebookApp.token='' Examples.ipynb &> log.txt &
#          export pid=$!
#          cd ..
#          sleep 5
#          echo "t1 [$pid]"
#          mkdir screenshots
#          node test-data/makeScreenshot.js
#          cat examples/log.txt
#          kill -9 $pid
#      - uses: actions/upload-artifact@v1
#        with:
#          name: screenshots
#          path: screenshots
#  CheckAvailable:
#    runs-on: ${{ matrix.os }}
#    strategy:
#      max-parallel: 10
#      matrix:
#        os: [ubuntu-latest, windows-latest, macOS-latest]
#        python-version: [3.7]
#    steps:
#      - name: Fix windows
#        if: matrix.os == 'windows-latest'
#        shell: bash
#        run: echo ::set-env name=CONDA_BIN::$CONDA/Scripts/conda.exe
#      - name: Fix posix
#        if: matrix.os != 'windows-latest'
#        shell: bash
#        run: echo ::set-env name=CONDA_BIN::$CONDA/bin/conda
#      - name: check
#        shell: bash
#        run: |
#          echo "conda:"; $CONDA_BIN --version || true
#          echo "compare:"; compare --version || true
#          echo "node:"; node --version || true
#          echo "python:"; python --version || true
#          export
  VT:
    runs-on: macOS-latest
    steps:
      - name: install im
        run: |
          $CONDA/bin/conda init --all
          . ~/.bash_profile
          cat ~/.bash_profile
          conda --version || true
          conda create -n t1 -c conda-forge imagemagick
          conda activate t1
          compare --version



